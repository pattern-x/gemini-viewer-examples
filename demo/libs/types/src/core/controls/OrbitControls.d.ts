import type { CameraControlsEventMap } from "camera-controls/dist/types";
import * as THREE from "three";
export declare function isPerspectiveCamera(camera: THREE.Camera): camera is THREE.PerspectiveCamera;
export declare function isOrthographicCamera(camera: THREE.Camera): camera is THREE.OrthographicCamera;
export declare class OrbitControls {
    private cameraControls;
    object: THREE.PerspectiveCamera | THREE.OrthographicCamera;
    domElement: HTMLElement;
    center: THREE.Vector3;
    private _enableDamping;
    private dampingFactorValue?;
    private _enableZoom;
    private dollySpeedValue?;
    private _enableRotate;
    private rotateSpeedValue?;
    private _enablePan;
    private panSpeedValue?;
    private _rotateToCursor;
    private _mouseButtons;
    private _touches;
    private domElementKeyEvents?;
    private clock;
    keyPanSpeed: number;
    autoRotate: boolean;
    autoRotateSpeed: number;
    keys: {
        LEFT: string;
        UP: string;
        RIGHT: string;
        BOTTOM: string;
    };
    constructor(object: THREE.PerspectiveCamera | THREE.OrthographicCamera, domElement: HTMLElement);
    get minDistance(): number;
    set minDistance(value: number);
    get maxDistance(): number;
    set maxDistance(value: number);
    get minZoom(): number;
    set minZoom(value: number);
    get maxZoom(): number;
    set maxZoom(value: number);
    get minPolarAngle(): number;
    set minPolarAngle(value: number);
    get maxPolarAngle(): number;
    set maxPolarAngle(value: number);
    get minAzimuthAngle(): number;
    set minAzimuthAngle(value: number);
    get maxAzimuthAngle(): number;
    set maxAzimuthAngle(value: number);
    get enabled(): boolean;
    set enabled(value: boolean);
    get position(): THREE.Vector3;
    set position(value: THREE.Vector3);
    get target(): THREE.Vector3;
    set target(value: THREE.Vector3);
    get enableDamping(): boolean;
    set enableDamping(value: boolean);
    get dampingFactor(): number;
    set dampingFactor(value: number);
    get enableZoom(): boolean;
    set enableZoom(value: boolean);
    get zoomSpeed(): number;
    set zoomSpeed(value: number);
    get enableRotate(): boolean;
    set enableRotate(value: boolean);
    get rotateSpeed(): number;
    set rotateSpeed(value: number);
    get enablePan(): boolean;
    set enablePan(value: boolean);
    get panSpeed(): number;
    set panSpeed(value: number);
    get dollyToCursor(): boolean;
    set dollyToCursor(value: boolean);
    get screenSpacePanning(): boolean;
    set screenSpacePanning(value: boolean);
    get mouseButtons(): Partial<{
        LEFT: THREE.MOUSE;
        MIDDLE: THREE.MOUSE;
        RIGHT: THREE.MOUSE;
    }>;
    set mouseButtons(value: Partial<{
        LEFT: THREE.MOUSE;
        MIDDLE: THREE.MOUSE;
        RIGHT: THREE.MOUSE;
    }>);
    get touches(): Partial<{
        ONE: THREE.TOUCH;
        TWO: THREE.TOUCH;
    }>;
    set touches(value: Partial<{
        ONE: THREE.TOUCH;
        TWO: THREE.TOUCH;
    }>);
    get target0(): THREE.Vector3;
    set target0(value: THREE.Vector3);
    get position0(): THREE.Vector3;
    set position0(value: THREE.Vector3);
    get zoom0(): number;
    set zoom0(value: number);
    private handleKeyDown;
    private onKeyDown;
    private getAutoRotationAngle;
    listenToKeyEvents(domElement: HTMLElement): void;
    update(): void;
    saveState(): void;
    reset(): void;
    dispose(): void;
    getPolarAngle(): number;
    getAzimuthalAngle(): number;
    getDistance(): number;
    addEventListener(type: keyof CameraControlsEventMap, listener: (event: CameraControlsEventMap[keyof CameraControlsEventMap]) => void): void;
    removeEventListener(type: keyof CameraControlsEventMap, listener: (event: CameraControlsEventMap[keyof CameraControlsEventMap]) => void): void;
    dispatchEvent(event: {
        type: keyof CameraControlsEventMap;
    }): void;
    setLookAt(position: THREE.Vector3, target: THREE.Vector3): void;
    setOrbitPoint(vector3: THREE.Vector3): void;
}
