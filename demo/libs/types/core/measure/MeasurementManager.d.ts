import * as THREE from "three";
import { InputManager } from "../../core/input/InputManager";
import { BaseMeasureDrawable } from "../../core/measure/BaseMeasureDrawable";
import { MeasurementData, MeasurementType } from "../../core/measure/BaseMeasurement";
import type { BaseViewer } from "../../core/viewers";
export declare class MeasurementManager {
    selectedMeasurementDrawable: BaseMeasureDrawable | undefined;
    private overlayRender?;
    private drawableList;
    private drawableHelperList;
    private viewer;
    private inputManager;
    private osnapHelper;
    private measurements;
    private activeMeasurementType;
    private mobileTouchHelper?;
    constructor(viewer: BaseViewer, input: InputManager);
    private initEvents;
    get canvas(): HTMLCanvasElement;
    get raycaster(): THREE.Raycaster | undefined;
    addMeasurement(drawable: BaseMeasureDrawable, needFireEvent?: boolean): void;
    createMeasurement(data: MeasurementData): BaseMeasureDrawable;
    removeMeasurement(drawable: BaseMeasureDrawable, needFireEvent?: boolean): void;
    updateSnapTolerance(pixelSize?: number): void;
    activateMeasurement(type: MeasurementType): void;
    deactivateMeasurement(): void;
    getActiveMeasurementType(): MeasurementType | undefined;
    isMeasurementActive(): boolean;
    isMeasurementMeasuring(): boolean;
    getMeasurementsData(): MeasurementData[];
    cancelMeasurement(): void;
    setMeasurementsData(dataArray: MeasurementData[]): void;
    setMeasurementVisibility(id: string, visible: boolean): boolean;
    setMeasurementsVisibility(visible: boolean): void;
    clearMeasurements(): void;
    getMeasurementById(id: string): BaseMeasureDrawable;
    removeMeasurementById(id: string): void;
    selectMeasurementById(id: string): void;
    selectMeasurement(drawable: BaseMeasureDrawable): void;
    unselectMeasurement(renderEnabled?: boolean): void;
    destroy(): void;
    private keydown;
    private render;
}
